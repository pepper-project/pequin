Index: lib/Sema/SemaStmtAttr.cpp
===================================================================
--- lib/Sema/SemaStmtAttr.cpp	(revision 319532)
+++ lib/Sema/SemaStmtAttr.cpp	(working copy)
@@ -288,6 +288,31 @@
   return OpenCLUnrollHintAttr::CreateImplicit(S.Context, UnrollFactor);
 }
 
+static Attr *handleLoopFlattenAttr(Sema &S, Stmt *St, const AttributeList &A, SourceRange Range) {
+  if (isa<ForStmt>(St) || isa<WhileStmt>(St) || isa<DoStmt>(St)) {
+    // expecting an expression argument
+    const Expr *e = A.getArgAsExpr(0);
+    llvm::APSInt ilit;
+ 
+    // if we can't convert arg to an integer, abort
+    if (! e->EvaluateAsInt(ilit, S.Context)) {
+        S.Diag(e->getLocStart(), diag::err_attribute_argument_type) << A.getName() << AANT_ArgumentIntegerConstant;
+    } else {
+        // convert to int
+        const int NumIters = (int) ilit.getLimitedValue((1U << 31) - 1);
+
+        // create new LoopFlattenAttr
+        return ::new (S.Context)
+            LoopFlattenAttr(A.getRange(), S.Context, NumIters,
+                            A.getAttributeSpellingListIndex());
+    }
+  } else {
+    S.Diag(A.getRange().getBegin(), diag::err_attribute_invalid_on_nonloop) << A.getName() << St->getLocStart();
+  }
+
+  return nullptr;
+}
+
 static Attr *ProcessStmtAttribute(Sema &S, Stmt *St, const AttributeList &A,
                                   SourceRange Range) {
   switch (A.getKind()) {
@@ -296,6 +321,8 @@
            diag::warn_unhandled_ms_attribute_ignored :
            diag::warn_unknown_attribute_ignored) << A.getName();
     return nullptr;
+  case AttributeList::AT_LoopFlatten:
+    return handleLoopFlattenAttr(S, St, A, Range);
   case AttributeList::AT_FallThrough:
     return handleFallThroughAttr(S, St, A, Range);
   case AttributeList::AT_LoopHint:
